module DECODER_v (input clk,
					  input [15:0] IR, //Instruction.
					  output reg [31:0] MIR1,
					  output reg [8:0] K,
					  output reg [13:0] MA); //Memory.
	reg [31:0] ROM0 [0:6];
	reg [31:0] ROM1 [0:11];
	reg [31:0] ROM2 [0:8];
	reg [31:0] ROM3 [0:10];
	reg [31:0] ROM4 [0:5];
	reg signed [15:0] temp; ///
	integer i = 0;
//	reg [5:0] A;
//	reg [5:0] B;
//	reg KMx;
//   reg MR;
//   reg MW;
//	reg [3:0] ALU;
//	reg [1:0] SH;
//	reg [5:0] C;
//	reg [6:0] T;
//	reg [11:0] Add;
	initial begin
		ROM0[0] = 32'b00000000000000000001000111000000; //JMP X
		ROM0[1] = 32'b00000000000000000001000111000001; //JZE X
		ROM0[2] = 32'b00000000000000000001000111000001; //JNE X
		ROM0[3] = 32'b00000000000000000001000111010000; //JCY X
		ROM0[4] = 32'b00000000000000000001000110000001; //MEW Y,W
		ROM0[5] = 32'b00000000000010000001000110000010; //MER W,Y
		ROM0[6] = 32'b00000000000000000001000111000000; //BSR S
		ROM1[0] = 32'b00000000000000001000000000001100; //EQR Ri,Rj //EQR POi,Rj //EQR Ri,PIj //EQR POi,PIj
		ROM1[1] = 32'b10001000000000001000000000001001; //EQR Ri,W //EQR POi,W
		ROM1[2] = 32'b10001000000000100000000000001101; //ANR Ri,Rj
		ROM1[3] = 32'b10001000000000101000000000001101; //ORR Ri,Rj
		ROM1[4] = 32'b10001000000000110000000000001101; //XOR Ri,Rj
		ROM1[5] = 32'b10001000000000111000000000111101; //ADR Ri,Rj
		ROM1[6] = 32'b10001000000001000000000000111101; //SUR Ri,Rj
		ROM1[7] = 32'b10001000000001001000000000101101; //MUR Ri,Rj
		ROM1[8] = 32'b10001000000001010000000000101101; //DIR Ri,Rj
		ROM1[9] = 32'b10001000000001011000000000101101; //MOR Ri,Rj
		ROM1[10] = 32'b10001000000000000010000000001001; //SLR Ri,W
		ROM1[11] = 32'b10001000000000000100000000001001; //SRR Ri,W
		ROM2[0] = 32'b00000000000100000001000100000010; //EQK W,K
		ROM2[1] = 32'b10001000000100100001000100000011; //ANK W,K
		ROM2[2] = 32'b10001000000100101001000100000011; //ORK W,K
		ROM2[3] = 32'b10001000000100110001000100000011; //XOK W,K
		ROM2[4] = 32'b10001000000100111001000100110011; //ADK W,K
		ROM2[5] = 32'b10001000000101000001000100110011; //SUK W,K
		ROM2[6] = 32'b10001000000101001001000100100011; //MUK W,K
		ROM2[7] = 32'b10001000000101010001000100100011; //DIK W,K
		ROM2[8] = 32'b10001000000101011001000100100011; //MOK W,K
		ROM3[0] = 32'b00000000000000001001000100000110; //EQW W,Rj //EQW W,PIj
		ROM3[1] = 32'b10001000000000100001000100000111; //ANR W,Rj
		ROM3[2] = 32'b10001000000000101001000100000111; //ORR W,Rj
		ROM3[3] = 32'b10001000000000110001000100000111; //XOR W,Rj
		ROM3[4] = 32'b10001000000000111000000000111101; //ADR Ri,Rj
		ROM3[5] = 32'b10001000000001000001000100110111; //SUR W,Rj
		ROM3[6] = 32'b10001000000001001001000100100111; //MUR W,Rj
		ROM3[7] = 32'b10001000000001010001000100100111; //DIR W,Rj
		ROM3[8] = 32'b10001000000001011001000100100111; //MOW W,Rj
		ROM3[9] = 32'b00000000000000001011000100000110; //SLR W,Rj
		ROM3[10] = 32'b00000000000000001101000100000110; //SRR W,Rj
		ROM4[0] = 32'b10001000000000010001000100000011; //NOT W
		ROM4[1] = 32'b10001000000000000011000100000011;	//SHL W
		ROM4[2] = 32'b10001000000000000101000100000011; //SHR W
		ROM4[3] = 32'b00000000000001100001000110100000; //CLR CY
		ROM4[4] = 32'b00000000000001101001000110100000; //SET CY
		ROM4[5] = 32'b00000000000000000001000111000000; //RET
	end
	always@ (negedge clk) begin //always@ (IR) begin
		temp = IR;
		M = 16'h1000; //Not memory access.
		while (temp > 0) begin
			temp = temp << 1;
			i = i + 1;
		end
		case (i)
			0 : begin
				temp = temp >> 12;
				MIR1 = ROM0[temp];
				case (temp)
					4'b1100 : MA = IR & 16'h0fff;
					4'b1101 : MA = IR & 16'h0fff;
				endcase
			end
			1 : begin
				temp = temp >> 11;
				MIR1 = IR & 16'h001f; //get Rj
				MIR1 = MIR1 << 19;
				MIR1 = MIR1 | (IR & 16'h03e0); //get Ri
				MIR1 = MIR1 << 2;
				MIR1 = MIR1 | ROM1[temp];
			end
			2 : begin
				temp = temp >> 11;
				MIR1 = ROM2[temp];
				K = IR & 16'h01ff;
			end
			3 : begin
				temp = temp >> 11;
				MIR1 = IR & 16'h001f; //get Rj
				MIR1 = MIR1 << 21;
				MIR1 = MIR1 | ROM3[temp];
			end
			4 : begin
				temp = temp >> 12;
				MIR1 = ROM4[temp];
			end
			default : MIR1 = 0; ///
		endcase
	end
//		case (i)
//			0 : begin
//				temp = temp >> 12;
//				case (temp)
//					//temp = IR & 16'h0fff; //get Add.
//					4'b1000 : begin
//						MIR1 = 32'b00000000000000000001000111000000; //JMP X
//					end
//					4'b1001 : begin
//						MIR1 = 32'b00000000000000000001000111000001; //JZE X
//					end 
//					4'b1010 : begin
//						MIR1 = 32'b00000000000000000001000111000001; //JNE X
//					end
//					4'b1011 : begin
//						MIR1 = 32'b00000000000000000001000111010000; //JCY X
//					end
//					4'b1100 : begin
//						MIR1 = 32'b00000000000000000001000110000001; //MEW Y,W
//						Add = IR & 16'h0fff;
//					end 
//					4'b1101 : begin
//						MIR1 = 32'b00000000000010000001000110000010; //MER W,Y
//						Add = IR & 16'h0fff;
//					end
//					4'b1110 : begin
//						MIR1 = 32'b00000000000000000001000111000000; //BSR S
//					end
//				endcase
//			end
//			1 : begin
//				temp = temp >> 11;
//				MIR1 = IR & 16'h001f; //get Rj
//				MIR1 = MIR1 << 19;
//				MIR1 = MIR1 | (IR & 16'h03e0); //get Ri
//				MIR1 = MIR1 << 2;
//				case (temp)
//					5'b10000 : begin
//						MIR1 = MIR1 | 32'b00000000000000001000000000001100; //EQR Ri,Rj //EQR POi,Rj //EQR Ri,PIj //EQR POi,PIj
//					end
//					5'b10001 : begin
//						MIR1 = MIR1 | 32'b10001000000000001000000000001001; //EQR Ri,W //EQR POi,W
//					end
//					5'b10010 : begin 
//						MIR1 = MIR1 | 32'b10001000000000100000000000001101; //ANR Ri,Rj
//					end
//					5'b10011 : begin 
//						MIR1 = MIR1 | 32'b10001000000000101000000000001101; //ORR Ri,Rj
//					end
//					5'b10100 : begin 
//						MIR1 = MIR1 | 32'b10001000000000110000000000001101; //XOR Ri,Rj
//					end
//					5'b10101 : begin 
//						MIR1 = MIR1 | 32'b10001000000000111000000000111101; //ADR Ri,Rj
//					end
//					5'b10110 : begin 
//						MIR1 = MIR1 | 32'b10001000000001000000000000111101; //SUR Ri,Rj
//					end
//					5'b10111 : begin 
//						MIR1 = MIR1 | 32'b10001000000001001000000000101101; //MUR Ri,Rj
//					end
//					5'b11000 : begin 
//						MIR1 = MIR1 | 32'b10001000000001010000000000101101; //DIR Ri,Rj
//					end
//					5'b11001 : begin 
//						MIR1 = MIR1 | 32'b10001000000001011000000000101101; //MOR Ri,Rj
//					end
//					5'b11010 : begin 
//						MIR1 = MIR1 | 32'b10001000000000000010000000001001; //SLR Ri,W
//					end
//					5'b11010 : begin 
//						MIR1 = MIR1 | 32'b10001000000000000100000000001001; //SRR Ri,W
//					end
//				endcase
//			end
//			2 : begin
//				K = IR & 16'h01ff;
//				temp = temp >> 11;
//				case (temp)
//					5'b10000 : begin
//						MIR1 = 32'b00000000000100000001000100000010;	//EQK W,K
//					end
//					5'b10001 : begin
//						MIR1 = 32'b10001000000100100001000100000011;	//ANK W,K
//					end
//					5'b10010 : begin
//						MIR1 = 32'b10001000000100101001000100000011;	//ORK W,K
//					end
//					5'b10011 : begin
//						MIR1 = 32'b10001000000100110001000100000011;	//XOK W,K
//					end
//					5'b10100 : begin
//						MIR1 = 32'b10001000000100111001000100110011; //ADK W,K
//					end
//					5'b10101 : begin
//						MIR1 = 32'b10001000000101000001000100110011;	//SUK W,K
//					end
//					5'b10100 : begin
//						MIR1 = 32'b10001000000101001001000100100011; //MUK W,K
//					end
//					5'b10101 : begin
//						MIR1 = 32'b10001000000101010001000100100011; //DIK W,K
//					end
//					5'b10101 : begin
//						MIR1 = 32'b10001000000101011001000100100011; //MOK W,K
//					end
//				endcase	
//			end
//			3 : begin
//				temp = temp >> 11;
//				MIR1 = IR & 16'h001f; //get Rj
//				MIR1 = MIR1 << 21;
//				case (temp)
//					5'b10000 : begin
//						MIR1 = MIR1 | 32'b00000000000000001001000100000110; //EQW W,Rj //EQW W,PIj
//					end
//					5'b10001 : begin
//						MIR1 = MIR1 | 32'b10001000000000100001000100000111; //ANR W,Rj
//					end
//					5'b10010 : begin
//						MIR1 = MIR1 | 32'b10001000000000101001000100000111; //ORR W,Rj
//					end
//					5'b10011 : begin
//						MIR1 = MIR1 | 32'b10001000000000110001000100000111; //XOR W,Rj
//					end
//					5'b10100 : begin
//						MIR1 = MIR1 | 32'b10001000000000111001000100110111; //ADR W,Rj
//					end
//					5'b10101 : begin
//						MIR1 = MIR1 | 32'b10001000000001000001000100110111; //SUR W,Rj
//					end
//					5'b10110 : begin
//						MIR1 = MIR1 | 32'b10001000000001001001000100100111; //MUR W,Rj
//					end
//					5'b10110 : begin
//						MIR1 = MIR1 | 32'b10001000000001010001000100100111; //DIR W,Rj
//					end
//					5'b10111 : begin
//						MIR1 = MIR1 | 32'b10001000000001011001000100100111; //MOW W,Rj
//					end
//					5'b11000 : begin
//						MIR1 = MIR1 | 32'b00000000000000001011000100000110; //SLR W,Rj
//					end
//					5'b11000 : begin
//						MIR1 = MIR1 | 32'b00000000000000001101000100000110; //SRR W,Rj
//					end
//				endcase
//			end
//			4 : begin
//			end
//			5 : begin
//			end
//			6 : begin
//			end
//			default : MIR1 = i;
//		endcase
//	end
endmodule