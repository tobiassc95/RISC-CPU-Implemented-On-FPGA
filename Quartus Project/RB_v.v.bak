module REGISTERBANK_v (input clk, 
							  input [6:0] WC, 
							  input [6:0] RA, 
							  input [6:0] RB, 
							  input [15:0] C, 
							  output reg [15:0] A, 
							  output reg [15:0] B,
//							  inout reg WM,
//							  inout reg RM,
							  inout reg [15:0] M);
	reg [15:0] R [0:34]; // GPR+IO+W+MAR+AUX
	integer i;
	initial begin
		for(i = 0; i < 35; i = i + 1) begin
			R[i] = 0;
		end
	end
//	parameter R00 = 6'b000000,
//				 R01 = 6'b000001,
//				 R02 = 6'b000010,
//				 R03 = 6'b000011,
//				 R04 = 6'b000100,
//				 R05 = 6'b000101,
//				 R06 = 6'b000110,
//				 R07 = 6'b000111,
//				 R08 = 6'b001000,
//				 R09 = 6'b001001,
//				 R10 = 6'b001010,
//				 R11 = 6'b001011,
//				 R12 = 6'b001100,
//				 R13 = 6'b001101,
//				 R14 = 6'b001110,
//				 R15 = 6'b001111,
//				 R16 = 6'b010000,
//				 R17 = 6'b010001,
//				 R18 = 6'b010010,
//				 R19 = 6'b010011,
//				 R20 = 6'b010100,
//				 R21 = 6'b010101,
//				 R22 = 6'b010110,
//				 R23 = 6'b010111,
//				 R24 = 6'b011000,
//				 R25 = 6'b011001,
//				 R26 = 6'b011010,
//				 R27 = 6'b011011,
//				 R28 = 6'b011100,
//				 R29 = 6'b011101,
//				 R30 = 6'b011110,
//				 R31 = 6'b011111,
//				 R32 = 6'b100000;
	always@ (posedge clk) begin
//		if(WC < 35)
			R[WC] = C; //escribir el Raux cuando no queremos escribir.
	end
	always@ (negedge clk) begin
//		if(RA < 35)
			A = R[RA];
//		if(RB < 35)
			B = R[RB];
	end
endmodule