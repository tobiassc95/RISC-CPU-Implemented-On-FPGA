// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/05/2021 15:09:04"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          temp
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module temp_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [15:0] IR;
// wires                                               
wire [8:0] K;
wire [12:0] MA;
wire [31:0] MIR;

// assign statements (if any)                          
temp i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.IR(IR),
	.K(K),
	.MA(MA),
	.MIR(MIR)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #125000 1'b1;
	#125000;
end 
// IR[ 15 ]
initial
begin
	IR[15] = 1'b0;
end 
// IR[ 14 ]
initial
begin
	IR[14] = 1'b0;
	IR[14] = #510000 1'b1;
	IR[14] = #250000 1'b0;
end 
// IR[ 13 ]
initial
begin
	IR[13] = 1'b0;
	IR[13] = #260000 1'b1;
	IR[13] = #500000 1'b0;
end 
// IR[ 12 ]
initial
begin
	IR[12] = 1'b1;
	IR[12] = #260000 1'b0;
end 
// IR[ 11 ]
initial
begin
	IR[11] = 1'b1;
end 
// IR[ 10 ]
initial
begin
	IR[10] = 1'b0;
	IR[10] = #510000 1'b1;
end 
// IR[ 9 ]
initial
begin
	IR[9] = 1'b1;
	IR[9] = #260000 1'b0;
end 
// IR[ 8 ]
initial
begin
	IR[8] = 1'b0;
	IR[8] = #260000 1'b1;
end 
// IR[ 7 ]
initial
begin
	IR[7] = 1'b0;
end 
// IR[ 6 ]
initial
begin
	IR[6] = 1'b0;
	IR[6] = #260000 1'b1;
	IR[6] = #500000 1'b0;
end 
// IR[ 5 ]
initial
begin
	IR[5] = 1'b0;
end 
// IR[ 4 ]
initial
begin
	IR[4] = 1'b1;
	IR[4] = #760000 1'b0;
end 
// IR[ 3 ]
initial
begin
	IR[3] = 1'b1;
	IR[3] = #510000 1'b0;
end 
// IR[ 2 ]
initial
begin
	IR[2] = 1'b1;
	IR[2] = #260000 1'b0;
end 
// IR[ 1 ]
initial
begin
	IR[1] = 1'b1;
	IR[1] = #510000 1'b0;
end 
// IR[ 0 ]
initial
begin
	IR[0] = 1'b1;
	IR[0] = #760000 1'b0;
end 
endmodule

