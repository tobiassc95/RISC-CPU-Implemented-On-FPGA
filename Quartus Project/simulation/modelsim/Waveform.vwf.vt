// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/25/2021 17:52:51"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          temp
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module temp_vlg_vec_tst();
// constants                                           
// general purpose registers
reg add_sub;
reg cin;
reg [15:0] dataa;
reg [15:0] datab;
// wires                                               
wire cout;
wire overflow;
wire [15:0] result;

// assign statements (if any)                          
temp i1 (
// port map - connection between master ports and signals/registers   
	.add_sub(add_sub),
	.cin(cin),
	.cout(cout),
	.dataa(dataa),
	.datab(datab),
	.overflow(overflow),
	.result(result)
);
initial 
begin 
#1000000 $stop;
end 

// add_sub
always
begin
	add_sub = 1'b0;
	add_sub = #250000 1'b1;
	#250000;
end 

// cin
initial
begin
	cin = 1'b0;
end 
// dataa[ 15 ]
initial
begin
	dataa[15] = 1'b0;
end 
// dataa[ 14 ]
initial
begin
	dataa[14] = 1'b0;
end 
// dataa[ 13 ]
initial
begin
	dataa[13] = 1'b0;
end 
// dataa[ 12 ]
initial
begin
	dataa[12] = 1'b0;
end 
// dataa[ 11 ]
initial
begin
	dataa[11] = 1'b0;
end 
// dataa[ 10 ]
initial
begin
	dataa[10] = 1'b0;
end 
// dataa[ 9 ]
initial
begin
	dataa[9] = 1'b0;
end 
// dataa[ 8 ]
initial
begin
	dataa[8] = 1'b0;
end 
// dataa[ 7 ]
initial
begin
	dataa[7] = 1'b0;
end 
// dataa[ 6 ]
initial
begin
	dataa[6] = 1'b1;
end 
// dataa[ 5 ]
initial
begin
	dataa[5] = 1'b1;
end 
// dataa[ 4 ]
initial
begin
	dataa[4] = 1'b0;
end 
// dataa[ 3 ]
initial
begin
	dataa[3] = 1'b0;
end 
// dataa[ 2 ]
initial
begin
	dataa[2] = 1'b1;
end 
// dataa[ 1 ]
initial
begin
	dataa[1] = 1'b0;
end 
// dataa[ 0 ]
initial
begin
	dataa[0] = 1'b0;
end 
// datab[ 15 ]
initial
begin
	datab[15] = 1'b0;
end 
// datab[ 14 ]
initial
begin
	datab[14] = 1'b0;
end 
// datab[ 13 ]
initial
begin
	datab[13] = 1'b0;
end 
// datab[ 12 ]
initial
begin
	datab[12] = 1'b0;
end 
// datab[ 11 ]
initial
begin
	datab[11] = 1'b0;
end 
// datab[ 10 ]
initial
begin
	datab[10] = 1'b0;
end 
// datab[ 9 ]
initial
begin
	datab[9] = 1'b0;
end 
// datab[ 8 ]
initial
begin
	datab[8] = 1'b0;
end 
// datab[ 7 ]
initial
begin
	datab[7] = 1'b1;
end 
// datab[ 6 ]
initial
begin
	datab[6] = 1'b1;
end 
// datab[ 5 ]
initial
begin
	datab[5] = 1'b0;
end 
// datab[ 4 ]
initial
begin
	datab[4] = 1'b0;
end 
// datab[ 3 ]
initial
begin
	datab[3] = 1'b1;
end 
// datab[ 2 ]
initial
begin
	datab[2] = 1'b0;
end 
// datab[ 1 ]
initial
begin
	datab[1] = 1'b0;
end 
// datab[ 0 ]
initial
begin
	datab[0] = 1'b0;
end 
endmodule

